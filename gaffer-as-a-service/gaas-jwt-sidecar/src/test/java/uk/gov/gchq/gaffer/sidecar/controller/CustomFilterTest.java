/* * Copyright 2021 Crown Copyright * * Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package uk.gov.gchq.gaffer.sidecar.controller;import org.junit.jupiter.api.BeforeEach;import org.junit.jupiter.api.Test;import org.mockito.ArgumentCaptor;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.test.autoconfigure.web.reactive.WebFluxTest;import org.springframework.boot.test.mock.mockito.MockBean;import org.springframework.cloud.gateway.filter.GatewayFilterChain;import org.springframework.http.server.reactive.ServerHttpRequest;import org.springframework.mock.http.server.reactive.MockServerHttpRequest;import org.springframework.mock.web.server.MockServerWebExchange;import org.springframework.web.server.ServerWebExchange;import reactor.core.publisher.Mono;import uk.gov.gchq.gaffer.sidecar.util.UnitTest;import static org.junit.jupiter.api.Assertions.assertEquals;import static org.mockito.Mockito.when;@WebFluxTest(controllers = CustomFilter.class)@UnitTestpublic class CustomFilterTest {    @Autowired    private CustomFilter customFilter;    @MockBean    private GatewayFilterChain filterChain;    private ArgumentCaptor<ServerWebExchange> captor = ArgumentCaptor.forClass(ServerWebExchange.class);    @BeforeEach    void setup() {        when(filterChain.filter(captor.capture())).thenReturn(Mono.empty());    }    @Test    void filterTest() {        MockServerHttpRequest request = MockServerHttpRequest.get("/auth").build();        MockServerWebExchange exchange = MockServerWebExchange.from(request);        //customFilter.filter(exchange, filterChain);        customFilter.filter(exchange, filterChain).block();        // write the given data buffer to the response// and return a Mono that signals when it's done       // exchange.getResponse().writeWith(Mono.just());// marks the response as complete and forbids writing to it        exchange.getResponse().setComplete();        ServerHttpRequest actualRequest = captor.getValue().getRequest();        // Now you can assert anything in the actualRequest        assertEquals(request, actualRequest);    }}