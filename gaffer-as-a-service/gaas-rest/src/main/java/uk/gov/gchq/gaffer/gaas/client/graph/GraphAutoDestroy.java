/* * Copyright 2021-2022 Crown Copyright * * Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package uk.gov.gchq.gaffer.gaas.client.graph;import io.fabric8.kubernetes.api.model.apps.Deployment;import io.fabric8.kubernetes.client.DefaultKubernetesClient;import io.fabric8.kubernetes.client.KubernetesClient;import io.kubernetes.client.openapi.ApiException;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.scheduling.annotation.Scheduled;import org.springframework.stereotype.Component;import uk.gov.gchq.gaffer.gaas.exception.GaaSRestApiException;import uk.gov.gchq.gaffer.gaas.handlers.DeploymentHandler;import java.time.LocalDateTime;import java.util.List;import static uk.gov.gchq.gaffer.gaas.factories.GaaSRestExceptionFactory.from;import static uk.gov.gchq.gaffer.gaas.util.Properties.NAMESPACE;@Componentpublic class GraphAutoDestroy {    @Autowired    private DeploymentHandler deploymentHandler;    Logger LOGGER = LoggerFactory.getLogger(GraphAutoDestroy.class);    @Scheduled(cron = "0 0/5 * * * ?")    public void autoDestroyGraph() throws GaaSRestApiException {        KubernetesClient kubernetesClient = new DefaultKubernetesClient();        try {            List<Deployment> deploymentList = kubernetesClient.apps().deployments().inNamespace(NAMESPACE).withLabel("deleteGraph").list().getItems();            if (!deploymentList.isEmpty()) {                for (final Deployment deployment : deploymentList) {                    String newDeleteGraph = deployment.getMetadata().getLabels().get("deleteGraph").toLowerCase().replaceAll("_", ":");                    LocalDateTime deleteGraphTime = LocalDateTime.parse(newDeleteGraph);                    LocalDateTime currentTime = LocalDateTime.now();                    LocalDateTime fiveMinutesTime = currentTime.minusMinutes(5);                    if ((deleteGraphTime.isAfter(fiveMinutesTime) && deleteGraphTime.isBefore(currentTime)) || deleteGraphTime.isEqual(currentTime)) {                        String graphId = deployment.getMetadata().getLabels().get("app.kubernetes.io/instance");                        LOGGER.info("Graph to be deleted {}", graphId);                        deploymentHandler.onGafferDelete(deployment.getMetadata().getLabels().get("app.kubernetes.io/instance"), kubernetesClient);                        LOGGER.info("Graph is deleted {}", graphId);                    }                }            }        } catch (ApiException e) {            LOGGER.debug("Failed to auto delete graph. Kubernetes client returned Status Code: {} ", e.getCode(), e);            throw from(e);        }    }}